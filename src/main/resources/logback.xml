<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--D://Data/nookblog /usr/local/app/logs/nookblog-->
    <property name="DEV_LOG_HOME" value="log" />
    <property name="PRD_LOG_HOME" value="log" />

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />

    <!-- %m输出的信息, %p日志级别, %t线程名, %d日期, %c类的全名, %i索引 -->
    <!-- appender是configuration的子节点,是负责写日志的组件 -->
    <!-- ConsoleAppender把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--多环境配置:appender包含进来的原因是放外面logback初始化时候appender会直接生成log文件-->
    <springProfile name="dev">
        <!-- RollingFileAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
        <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是sys.log -->
        <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->

        <!--多环境配置：springboot中不要显式配置logging.config= classpath:logback.xml，否则logback会初始化报错-->
        <!-- 控制台日志输出级别 -->
        <appender name="DEV_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>${DEV_LOG_HOME:-logs}/sys.log</File>
            <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
            <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
            <rollingPolicy  class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
                <!-- 文件名：log/sys.2017-12-05.0.log -->
                <fileNamePattern>${DEV_LOG_HOME:-logs}/sys.%d.%i.log</fileNamePattern>
                <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
                <maxHistory>30</maxHistory>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
                    <maxFileSize>20MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <!-- pattern节点，用来设置日志的输入格式 -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread{16}] %-5level %logger{50} - %msg%n</pattern>
                <!-- 此处设置字符集 -->
                <charset>UTF-8</charset>
            </encoder>
        </appender>
        <root level="info">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="DEV_FILE"/>
        </root>
    </springProfile>
    <springProfile name="prd">
        <appender name="PRD_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>${PRD_LOG_HOME:-logs}/sys.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${PRD_LOG_HOME:-logs}/minenook.%d.%i.log</fileNamePattern>
                <maxHistory>30</maxHistory>
                <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>20MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread{16}] %-5level %logger{50} - %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>
        <root level="info">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="PRD_FILE"/>
        </root>
    </springProfile>
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- pers.mine.nookblog为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
</configuration>
